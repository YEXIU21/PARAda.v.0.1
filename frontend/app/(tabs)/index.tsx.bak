import React, { useState, useEffect, useRef } from 'react';
import { 
  StyleSheet, 
  View, 
  Text, 
  TouchableOpacity, 
  Alert, 
  StatusBar,
  Dimensions,
  ActivityIndicator,
  Animated,
  ScrollView,
  PanResponder,
  Modal,
  Image,
  FlatList,
  TextInput,
  useColorScheme,
  Switch
} from 'react-native';
import MapView, { Marker, PROVIDER_GOOGLE, Polyline, Circle } from 'react-native-maps';
import * as Location from 'expo-location';
import { FontAwesome5 } from '@expo/vector-icons';
import { Link, useRouter } from 'expo-router';
import FeedbackForm from '../../components/FeedbackForm';
import { scheduleVehicleArrivalNotification } from '../../components/NotificationService';
import { LinearGradient } from 'expo-linear-gradient';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useAuth } from '../../context/AuthContext';
import { useTheme } from '@/context/ThemeContext';

interface Vehicle {
  id: number;
  type: string;
  name: string;
  eta: string;
  location: {
    latitude: number;
    longitude: number;
  };
}

interface VehicleType {
  id: string;
  name: string;
  icon: string;
  description: string;
}

interface Subscription {
  id: string;
  name: string;
  price: string;
  duration: string;
  features: string[];
  recommended?: boolean;
}

interface Route {
  id: string;
  name: string;
  description: string;
  vehicleType: string;
  stops: {
    name: string;
    coordinates: {
      latitude: number;
      longitude: number;
    }
  }[];
  path: {
    latitude: number;
    longitude: number;
  }[];
  driverId?: string;
  active: boolean;
}

interface Passenger {
  id: string;
  name: string;
  location: {
    latitude: number;
    longitude: number;
  };
  destination?: {
    latitude: number;
    longitude: number;
    name: string;
  };
  status: 'waiting' | 'assigned' | 'picked_up';
  vehicleId?: number;
  requestTime: string;
}

const vehicleTypes: VehicleType[] = [
  { id: 'bus', name: 'City Bus', icon: 'bus', description: 'Public city buses with fixed routes and schedules' },
  { id: 'jeep', name: 'Jeepney', icon: 'shuttle-van', description: 'Traditional Filipino transportation with flexible routes' },
  { id: 'train', name: 'Train', icon: 'train', description: 'Metro rail transit system with scheduled arrivals' }
];

// Default subscription plans - can be overridden by admin
const defaultSubscriptionPlans: Subscription[] = [
  { 
    id: 'basic', 
    name: 'Basic', 
    price: '₱99/month', 
    duration: 'Monthly',
    features: ['Real-time tracking', 'Schedule access', 'Traffic updates']
  },
  { 
    id: 'premium', 
    name: 'Premium', 
    price: '₱199/month', 
    duration: 'Monthly',
    features: ['All Basic features', 'Priority notifications', 'Offline maps', 'No advertisements'],
    recommended: true
  },
  { 
    id: 'annual', 
    name: 'Annual', 
    price: '₱999/year', 
    duration: 'Yearly (Save 16%)',
    features: ['All Premium features', '24/7 support', 'Schedule alarms', 'Trip history']
  }
];

const { width, height } = Dimensions.get('window');

// Define map styles outside of the component
const lightMapStyle = [
  {
    "elementType": "geometry",
    "stylers": [{ "color": "#f5f5f5" }]
  },
  {
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#616161" }]
  },
  {
    "elementType": "labels.text.stroke",
    "stylers": [{ "color": "#f5f5f5" }]
  },
  {
    "featureType": "administrative.land_parcel",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#bdbdbd" }]
  },
  {
    "featureType": "poi",
    "elementType": "geometry",
    "stylers": [{ "color": "#eeeeee" }]
  },
  {
    "featureType": "poi",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#757575" }]
  },
  {
    "featureType": "poi.park",
    "elementType": "geometry",
    "stylers": [{ "color": "#e5e5e5" }]
  },
  {
    "featureType": "poi.park",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#9e9e9e" }]
  },
  {
    "featureType": "road",
    "elementType": "geometry",
    "stylers": [{ "color": "#ffffff" }]
  },
  {
    "featureType": "road.arterial",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#757575" }]
  },
  {
    "featureType": "road.highway",
    "elementType": "geometry",
    "stylers": [{ "color": "#dadada" }]
  },
  {
    "featureType": "road.highway",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#616161" }]
  },
  {
    "featureType": "transit.line",
    "elementType": "geometry",
    "stylers": [{ "color": "#e5e5e5" }]
  },
  {
    "featureType": "transit.station",
    "elementType": "geometry",
    "stylers": [{ "color": "#eeeeee" }]
  },
  {
    "featureType": "water",
    "elementType": "geometry",
    "stylers": [{ "color": "#c9c9c9" }]
  },
  {
    "featureType": "water",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#9e9e9e" }]
  }
];

const darkMapStyle = [
  {
    "elementType": "geometry",
    "stylers": [{ "color": "#212121" }]
  },
  {
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#757575" }]
  },
  {
    "elementType": "labels.text.stroke",
    "stylers": [{ "color": "#212121" }]
  },
  {
    "featureType": "administrative",
    "elementType": "geometry",
    "stylers": [{ "color": "#757575" }]
  },
  {
    "featureType": "administrative.country",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#9e9e9e" }]
  },
  {
    "featureType": "administrative.land_parcel",
    "stylers": [{ "visibility": "off" }]
  },
  {
    "featureType": "administrative.locality",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#bdbdbd" }]
  },
  {
    "featureType": "poi",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#757575" }]
  },
  {
    "featureType": "poi.park",
    "elementType": "geometry",
    "stylers": [{ "color": "#181818" }]
  },
  {
    "featureType": "poi.park",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#616161" }]
  },
  {
    "featureType": "poi.park",
    "elementType": "labels.text.stroke",
    "stylers": [{ "color": "#1b1b1b" }]
  },
  {
    "featureType": "road",
    "elementType": "geometry.fill",
    "stylers": [{ "color": "#2c2c2c" }]
  },
  {
    "featureType": "road",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#8a8a8a" }]
  },
  {
    "featureType": "road.arterial",
    "elementType": "geometry",
    "stylers": [{ "color": "#373737" }]
  },
  {
    "featureType": "road.highway",
    "elementType": "geometry",
    "stylers": [{ "color": "#3c3c3c" }]
  },
  {
    "featureType": "road.highway.controlled_access",
    "elementType": "geometry",
    "stylers": [{ "color": "#4e4e4e" }]
  },
  {
    "featureType": "road.local",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#616161" }]
  },
  {
    "featureType": "transit",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#757575" }]
  },
  {
    "featureType": "water",
    "elementType": "geometry",
    "stylers": [{ "color": "#000000" }]
  },
  {
    "featureType": "water",
    "elementType": "labels.text.fill",
    "stylers": [{ "color": "#3d3d3d" }]
  }
];

export default function HomeScreen() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);
  const [showFeedback, setShowFeedback] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const bottomSheetHeight = useRef(new Animated.Value(180)).current;
  const [isBottomSheetExpanded, setIsBottomSheetExpanded] = useState(false);
  const [vehicles, setVehicles] = useState<Vehicle[]>([
    { id: 1, type: 'bus', name: 'Bus 101', eta: '5 min', location: { latitude: 37.78825, longitude: -122.4324 } },
    { id: 2, type: 'bus', name: 'Bus 202', eta: '8 min', location: { latitude: 37.78925, longitude: -122.4344 } },
    { id: 3, type: 'jeep', name: 'Jeep A', eta: '3 min', location: { latitude: 37.78625, longitude: -122.4314 } },
  ]);
  
  // Add new state for expanded features
  const [expandedFeature, setExpandedFeature] = useState<{planId: string, featureIdx: number} | null>(null);
  
  // New states for subscription system
  const [hasSubscription, setHasSubscription] = useState(false);
  const [showSubscriptionModal, setShowSubscriptionModal] = useState(false);
  const [showVehicleTypeModal, setShowVehicleTypeModal] = useState(false);
  const [selectedVehicleType, setSelectedVehicleType] = useState<string | null>(null);
  const [selectedSubscription, setSelectedSubscription] = useState<string | null>(null);
  const [isStudentDiscountEnabled, setIsStudentDiscountEnabled] = useState(true);
  const [studentDiscountPercent, setStudentDiscountPercent] = useState(20);
  
  // Auth context for user role
  const { user } = useAuth();
  const router = useRouter();
  const { isDarkMode, colors } = useTheme();
  
  // Subscription plan management
  const [subscriptionPlans, setSubscriptionPlans] = useState<Subscription[]>(defaultSubscriptionPlans);
  const [showAdminPriceModal, setShowAdminPriceModal] = useState(false);
  const [editingPlan, setEditingPlan] = useState<Subscription | null>(null);
  
  // Route management
  const [routes, setRoutes] = useState<Route[]>([]);
  const [showRouteModal, setShowRouteModal] = useState(false);
  const [selectedRoute, setSelectedRoute] = useState<Route | null>(null);
  const [showRouteManagementModal, setShowRouteManagementModal] = useState(false);
  
  // Passenger tracking
  const [passengers, setPassengers] = useState<Passenger[]>([
    {
      id: '1',
      name: 'Alex Smith',
      location: { latitude: 37.78925, longitude: -122.4344 },
      destination: { 
        latitude: 37.78625, 
        longitude: -122.4314,
        name: 'Harbor View'
      },
      status: 'waiting',
      requestTime: new Date(Date.now() - 300000).toISOString() // 5 minutes ago
    },
    {
      id: '2',
      name: 'Maria Garcia',
      location: { latitude: 37.78825, longitude: -122.4334 },
      destination: { 
        latitude: 37.78925, 
        longitude: -122.4344,
        name: 'Market Square'
      },
      status: 'assigned',
      vehicleId: 1,
      requestTime: new Date(Date.now() - 600000).toISOString() // 10 minutes ago
    }
  ]);
  const [showRequestRideModal, setShowRequestRideModal] = useState(false);
  const [showMyRideModal, setShowMyRideModal] = useState(false);
  const [selectedDestination, setSelectedDestination] = useState<{
    latitude: number;
    longitude: number;
    name: string;
  } | null>(null);
  const [isRequestingRide, setIsRequestingRide] = useState(false);
  const [myRideStatus, setMyRideStatus] = useState<{
    status: 'none' | 'waiting' | 'assigned' | 'picked_up';
    vehicle?: Vehicle;
    eta?: string;
  }>({ status: 'none' });
  
  // Define theme colors based on imported colors rather than local state
  const theme = {
    background: colors.background,
    card: colors.card,
    primary: colors.primary,
    primaryDark: colors.secondary,
    text: colors.text,
    textSecondary: colors.textSecondary,
    border: colors.border,
    marker: isDarkMode ? '#272727' : '#FFFFFF',
    danger: colors.error,
    success: colors.success,
    warning: colors.warning,
    gradientColors: colors.gradientColors,
    mapStyle: isDarkMode ? darkMapStyle : lightMapStyle,
    inputBackground: colors.inputBackground,
    inactiveItem: colors.inactiveItem,
  };
  
  // Load custom prices and routes on app load
  useEffect(() => {
    const loadData = async () => {
      try {
        // Load saved subscription plans (admin feature)
        const savedPlans = await AsyncStorage.getItem('subscriptionPlans');
        if (savedPlans) {
          setSubscriptionPlans(JSON.parse(savedPlans));
        }
        
        // Load student discount settings
        const discountEnabled = await AsyncStorage.getItem('isStudentDiscountEnabled');
        if (discountEnabled !== null) {
          setIsStudentDiscountEnabled(discountEnabled === 'true');
        }
        
        const discountPercent = await AsyncStorage.getItem('studentDiscountPercent');
        if (discountPercent) {
          setStudentDiscountPercent(parseInt(discountPercent, 10));
        }
        
        // For admin users, automatically grant subscription access
        if (user?.role === 'admin') {
          setHasSubscription(true);
          setSelectedVehicleType('bus');
          setSelectedSubscription('premium');
          setIsLoading(false);
          return;
        }
        
        // For non-admin users, check if they have a subscription
        const subscription = await AsyncStorage.getItem('userSubscription');
        if (subscription) {
          const data = JSON.parse(subscription);
          setSelectedVehicleType(data.type);
          setSelectedSubscription(data.plan);
          setHasSubscription(true);
          setIsLoading(false);
        }
        
        // Load routes
        const storedRoutes = await AsyncStorage.getItem('routes');
        if (storedRoutes) {
          setRoutes(JSON.parse(storedRoutes));
        } else {
          // Set default demo route if none exists
          const defaultRoutes = [
            {
              id: '1',
              name: 'Downtown Express',
              description: 'Main route through downtown area',
              vehicleType: 'bus',
              stops: [
                { name: 'Central Station', coordinates: { latitude: 37.78825, longitude: -122.4324 } },
                { name: 'Market Square', coordinates: { latitude: 37.78925, longitude: -122.4344 } },
                { name: 'Harbor View', coordinates: { latitude: 37.78625, longitude: -122.4314 } }
              ],
              path: [
                { latitude: 37.78825, longitude: -122.4324 },
                { latitude: 37.78865, longitude: -122.4334 },
                { latitude: 37.78925, longitude: -122.4344 },
                { latitude: 37.78775, longitude: -122.4329 },
                { latitude: 37.78625, longitude: -122.4314 }
              ],
              active: true
            }
          ];
          setRoutes(defaultRoutes);
          await AsyncStorage.setItem('routes', JSON.stringify(defaultRoutes));
        }
      } catch (error) {
        console.error('Error loading data:', error);
      }
    };
    
    loadData();
  }, [user]);

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: (_, gestureState) => {
        return Math.abs(gestureState.dy) > 10;
      },
      onPanResponderGrant: () => {
        // Capture the current value to avoid jumps
        bottomSheetHeight.extractOffset();
      },
      onPanResponderMove: (_, gestureState) => {
        // Calculate new height based on drag
        const currentValue = (bottomSheetHeight as any)._value || 0;
        const currentOffset = (bottomSheetHeight as any)._offset || 0;
        const newHeight = Math.max(180, Math.min(350, currentValue + currentOffset - gestureState.dy));
        bottomSheetHeight.setValue(newHeight - currentOffset);
      },
      onPanResponderRelease: (_, gestureState) => {
        bottomSheetHeight.flattenOffset();
        
        // Get current value for snapping
        const currentValue = (bottomSheetHeight as any)._value || 0;
        
        // If user dragged up, expand the sheet, otherwise collapse it
        if (gestureState.dy < -50) {
          expandBottomSheet();
        } else if (gestureState.dy > 50) {
          collapseBottomSheet();
        } else {
          // Snap to either expanded or collapsed state based on current position
          if (currentValue < 265) {
            collapseBottomSheet();
          } else {
            expandBottomSheet();
          }
        }
      }
    })
  ).current;

  useEffect(() => {
    (async () => {
      setIsLoading(true);
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        setIsLoading(false);
        return;
      }

      try {
        let location = await Location.getCurrentPositionAsync({});
        setLocation(location);
      } catch (error) {
        setErrorMsg('Could not get your location. Please try again.');
      } finally {
        setIsLoading(false);
      }
    })();
  }, []);

  const selectVehicleType = (type: string) => {
    setSelectedVehicleType(type);
    setShowVehicleTypeModal(false);
    setShowSubscriptionModal(true);
  };

  const subscribeToService = async (planId: string) => {
    try {
      // In a real app, this would be integrated with a payment gateway
      // For now, we'll just simulate a successful subscription
      setSelectedSubscription(planId);
      
      // Calculate expiry date (30 days for monthly, 365 for annual)
      const now = new Date();
      const expiry = new Date(now);
      expiry.setDate(expiry.getDate() + (planId === 'annual' ? 365 : 30));
      
      // Save subscription data
      await AsyncStorage.setItem('userSubscription', JSON.stringify({
        type: selectedVehicleType,
        plan: planId,
        expiryDate: expiry.toISOString()
      }));
      
      setHasSubscription(true);
      setShowSubscriptionModal(false);
      
      Alert.alert(
        'Subscription Successful!', 
        `Thank you for subscribing to PARAda ${planId.charAt(0).toUpperCase() + planId.slice(1)} plan!`
      );
    } catch (error) {
      console.error('Error saving subscription:', error);
      Alert.alert('Subscription Error', 'Could not process your subscription. Please try again.');
    }
  };

  const sendNotification = async (vehicle: Vehicle) => {
    try {
      await scheduleVehicleArrivalNotification(vehicle.name, vehicle.eta);
      Alert.alert(
        'Notification Set', 
        `You will be notified when ${vehicle.name} is approaching.`
      );
    } catch (error) {
      console.error('Error scheduling notification:', error);
      Alert.alert('Error', 'Failed to set notification. Please try again.');
    }
  };

  const expandBottomSheet = () => {
    Animated.spring(bottomSheetHeight, {
      toValue: 350,
      friction: 8,
      useNativeDriver: false,
    }).start();
    setIsBottomSheetExpanded(true);
  };

  const collapseBottomSheet = () => {
    Animated.spring(bottomSheetHeight, {
      toValue: 180,
      friction: 8,
      useNativeDriver: false,
    }).start();
    setIsBottomSheetExpanded(false);
  };

  const toggleBottomSheet = () => {
    if (!isBottomSheetExpanded) {
      expandBottomSheet();
    } else {
      collapseBottomSheet();
    }
  };

  // Vehicle Type Selection Modal
  const renderVehicleTypeModal = () => (
    <Modal
      animationType="slide"
      transparent={true}
      visible={showVehicleTypeModal}
      onRequestClose={() => setShowVehicleTypeModal(false)}
    >
      <View style={styles.modalOverlay}>
        <View style={[styles.modalContent, { backgroundColor: theme.card }]}>
          <LinearGradient
            colors={theme.gradientColors}
            style={styles.modalHeader}
          >
            <Text style={styles.modalTitle}>Select Vehicle Type</Text>
            <TouchableOpacity 
              onPress={() => setShowVehicleTypeModal(false)}
              style={styles.closeButton}
            >
              <FontAwesome5 name="times" size={20} color="white" />
            </TouchableOpacity>
          </LinearGradient>
          
          <ScrollView style={styles.modalBody}>
            {vehicleTypes.map((type) => (
              <TouchableOpacity 
                key={type.id}
                style={[
                  styles.vehicleTypeItem, 
                  { borderBottomColor: theme.border }
                ]}
                onPress={() => selectVehicleType(type.id)}
              >
                <View style={styles.vehicleTypeIcon}>
                  <FontAwesome5 name={type.icon} size={24} color="#4B6BFE" />
                </View>
                <View style={styles.vehicleTypeInfo}>
                  <Text style={[styles.vehicleTypeName, { color: theme.text }]}>{type.name}</Text>
                  <Text style={[styles.vehicleTypeDesc, { color: theme.textSecondary }]}>{type.description}</Text>
                </View>
                <FontAwesome5 name="chevron-right" size={16} color="#999" />
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>
      </View>
    </Modal>
  );
  
  // Change renderSubscriptionModal to display in a full view instead of a modal
  const renderSubscriptionView = () => (
    <View style={[styles.fullScreenContainer, { backgroundColor: theme.background }]}>
      <LinearGradient
        colors={theme.gradientColors}
        style={styles.fullScreenHeader}
      >
        <View style={styles.headerTitleContainer}>
          <Text style={styles.fullScreenTitle}>Choose a Subscription</Text>
          <TouchableOpacity 
            onPress={() => setShowSubscriptionModal(false)}
            style={styles.closeButtonContainer}
          >
            <View style={[styles.closeButtonCircle, { backgroundColor: 'rgba(255,255,255,0.2)' }]}>
              <FontAwesome5 name="times" size={16} color="white" />
            </View>
          </TouchableOpacity>
        </View>
      </LinearGradient>
      
      <ScrollView style={styles.fullScreenBody}>
        {subscriptionPlans.map((plan) => (
          <View 
            key={plan.id}
            style={[
              styles.subscriptionCard,
              { backgroundColor: theme.card, borderColor: theme.border },
              plan.recommended && [styles.recommendedSubscription, { borderColor: theme.primary }]
            ]}
          >
            {plan.recommended && (
              <View style={[styles.recommendedBadge, { backgroundColor: theme.primary }]}>
                <Text style={styles.recommendedText}>BEST VALUE</Text>
              </View>
            )}
            <Text style={[styles.subscriptionName, { color: theme.text }]}>{plan.name}</Text>
            <Text style={[styles.subscriptionPrice, { color: theme.primary }]}>{plan.price}</Text>
            <Text style={[styles.subscriptionDuration, { color: theme.textSecondary }]}>{plan.duration}</Text>
            
            <View style={[styles.divider, { backgroundColor: theme.border }]} />
            
            <View style={styles.featuresListContainer}>
              <Text style={[styles.featuresListTitle, { color: theme.text }]}>Features:</Text>
              {plan.features.map((feature, index) => (
                <TouchableOpacity 
                  key={index} 
                  style={[styles.featureListItem, {
                    backgroundColor: 
                      expandedFeature?.planId === plan.id && expandedFeature?.featureIdx === index 
                        ? (isDarkMode ? '#2A3451' : '#F5F8FF') 
                        : 'transparent'
                  }]}
                  onPress={() => {
                    if (expandedFeature && 
                        expandedFeature.planId === plan.id && 
                        expandedFeature.featureIdx === index) {
                      setExpandedFeature(null);
                    } else {
                      setExpandedFeature({ planId: plan.id, featureIdx: index });
                    }
                  }}
                >
                  <View style={styles.featureListItemHeader}>
                    <FontAwesome5 
                      name="check-circle" 
                      size={16} 
                      color={theme.primary} 
                      style={styles.featureIcon}
                    />
                    <Text style={[styles.featureListText, { color: theme.text, flex: 1 }]}>{feature}</Text>
                    <FontAwesome5 
                      name={expandedFeature && 
                            expandedFeature.planId === plan.id && 
                            expandedFeature.featureIdx === index ? "chevron-up" : "chevron-down"} 
                      size={14} 
                      color={theme.textSecondary} 
                    />
                  </View>
                  
                  {expandedFeature && 
                    expandedFeature.planId === plan.id && 
                    expandedFeature.featureIdx === index && (
                    <View style={[styles.featureListDetail, { borderTopColor: theme.border }]}>
                      <Text style={[styles.featureDetailText, { color: theme.textSecondary }]}>
                        {/* Here you could add more detailed descriptions for each feature.
                            For now we just show a placeholder text */}
                        Detailed information about this feature would appear here. This helps users understand the benefits and how to use this feature.
                      </Text>
                    </View>
                  )}
                </TouchableOpacity>
              ))}
            </View>
            
            <TouchableOpacity 
              style={[styles.subscribeButton, { backgroundColor: theme.primary }]}
              onPress={() => subscribeToService(plan.id)}
            >
              <Text style={styles.subscribeButtonText}>Subscribe Now</Text>
            </TouchableOpacity>
          </View>
        ))}
      </ScrollView>
    </View>
  );

  // Keep the original renderSubscriptionModal but replace its content with the new renderSubscriptionView
  const renderSubscriptionModal = () => (
    <Modal
      animationType="slide"
      transparent={false}
      visible={showSubscriptionModal}
      onRequestClose={() => setShowSubscriptionModal(false)}
    >
      {renderSubscriptionView()}
    </Modal>
  );
  
  // No subscription overlay
  const renderNoSubscriptionOverlay = () => (
    <View style={[styles.noSubscriptionContainer, { backgroundColor: isDarkMode ? 'rgba(0, 0, 0, 0.9)' : 'rgba(255, 255, 255, 0.9)' }]}>
      <View style={[styles.noSubscriptionContent, { backgroundColor: theme.card }]}>
        <FontAwesome5 name="map-marked-alt" size={60} color="#4B6BFE" />
        <Text style={[styles.noSubscriptionTitle, { color: theme.text }]}>Get Access to PARAda Maps</Text>
        <Text style={[styles.noSubscriptionText, { color: theme.textSecondary }]}>
          Choose your preferred transportation type and subscription plan to access real-time tracking
        </Text>
        
        <TouchableOpacity 
          style={styles.selectVehicleButton}
          onPress={() => setShowVehicleTypeModal(true)}
        >
          <Text style={styles.selectVehicleButtonText}>Select Transport Type</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  // Admin functions for subscription price management
  const saveSubscriptionPlans = async (updatedPlans: Subscription[]) => {
    try {
      await AsyncStorage.setItem('subscriptionPlans', JSON.stringify(updatedPlans));
      setSubscriptionPlans(updatedPlans);
      setShowAdminPriceModal(false);
      Alert.alert('Success', 'Subscription prices updated successfully!');
    } catch (error) {
      console.error('Error saving subscription plans:', error);
      Alert.alert('Error', 'Failed to update subscription prices.');
    }
  };

  const updatePlanPrice = (planId: string, newPrice: string) => {
    const updatedPlans = subscriptionPlans.map(plan => 
      plan.id === planId 
        ? { ...plan, price: newPrice } 
        : plan
    );
    saveSubscriptionPlans(updatedPlans);
  };

  // Function to handle opening admin price modal directly from header badge
  const openAdminSubscriptionModal = () => {
    if (user?.role === 'admin') {
      setShowAdminPriceModal(true);
    }
  };

  // Driver functions for route management
  const saveRoute = async (route: Route) => {
    try {
      let updatedRoutes: Route[];
      
      if (route.id) {
        // Update existing route
        updatedRoutes = routes.map(r => 
          r.id === route.id ? route : r
        );
      } else {
        // Add new route
        const newRoute = {
          ...route,
          id: Date.now().toString(),
          driverId: user?.id,
        };
        updatedRoutes = [...routes, newRoute];
      }
      
      await AsyncStorage.setItem('routes', JSON.stringify(updatedRoutes));
      setRoutes(updatedRoutes);
      setShowRouteManagementModal(false);
      setSelectedRoute(null);
      Alert.alert('Success', 'Route saved successfully!');
    } catch (error) {
      console.error('Error saving route:', error);
      Alert.alert('Error', 'Failed to save route.');
    }
  };

  const deleteRoute = async (routeId: string) => {
    try {
      const updatedRoutes = routes.filter(route => route.id !== routeId);
      await AsyncStorage.setItem('routes', JSON.stringify(updatedRoutes));
      setRoutes(updatedRoutes);
      setShowRouteManagementModal(false);
      setSelectedRoute(null);
      Alert.alert('Success', 'Route deleted successfully!');
    } catch (error) {
      console.error('Error deleting route:', error);
      Alert.alert('Error', 'Failed to delete route.');
    }
  };

  const toggleRouteActive = async (routeId: string, active: boolean) => {
    try {
      const updatedRoutes = routes.map(route => 
        route.id === routeId 
          ? { ...route, active } 
          : route
      );
      await AsyncStorage.setItem('routes', JSON.stringify(updatedRoutes));
      setRoutes(updatedRoutes);
      Alert.alert('Success', `Route ${active ? 'activated' : 'deactivated'} successfully!`);
    } catch (error) {
      console.error('Error toggling route status:', error);
      Alert.alert('Error', 'Failed to update route status.');
    }
  };

  // Render admin/driver action buttons
  const renderRoleSpecificActions = () => {
    if (!hasSubscription) return null;
    
    if (user?.role === 'admin') {
  return (
        <TouchableOpacity 
          style={styles.adminButton} 
          onPress={() => setShowAdminPriceModal(true)}
        >
          <LinearGradient
            colors={['#4B6BFE', '#3451E1']}
            style={styles.adminGradient}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
          >
            <FontAwesome5 name="sliders-h" size={20} color="white" />
          </LinearGradient>
        </TouchableOpacity>
      );
    }
    
    if (user?.role === 'driver') {
      return (
        <TouchableOpacity 
          style={styles.driverButton} 
          onPress={() => setShowRouteManagementModal(true)}
        >
          <LinearGradient
            colors={['#4B6BFE', '#3451E1']}
            style={styles.driverGradient}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
          >
            <FontAwesome5 name="route" size={20} color="white" />
          </LinearGradient>
        </TouchableOpacity>
      );
    }
    
    return null;
  };

  // Admin subscription price management modal
  const renderAdminPriceModal = () => (
    <Modal
      animationType="slide"
      transparent={true}
      visible={showAdminPriceModal}
      onRequestClose={() => setShowAdminPriceModal(false)}
    >
      <View style={[styles.modalOverlay, { backgroundColor: isDarkMode ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.5)' }]}>
        <View style={[styles.modalContent, { 
          backgroundColor: theme.card,
          borderColor: theme.border,
          borderWidth: 1
        }]}>
          <LinearGradient
            colors={theme.gradientColors}
            style={styles.modalHeader}
          >
            <Text style={styles.modalTitle}>Manage Subscription Plans</Text>
            <TouchableOpacity 
              onPress={() => setShowAdminPriceModal(false)}
              style={styles.closeButton}
            >
              <FontAwesome5 name="times" size={20} color="white" />
            </TouchableOpacity>
          </LinearGradient>
          
          <ScrollView style={[styles.modalBody, { backgroundColor: theme.background }]}>
            {subscriptionPlans.map((plan, index) => (
              <View key={plan.id} style={[styles.adminPriceItem, { 
                borderBottomColor: theme.border,
                backgroundColor: theme.card,
                marginBottom: 15,
                padding: 15,
                borderRadius: 8,
                borderWidth: 1,
                borderColor: theme.border
              }]}>
                <View style={styles.adminPriceHeader}>
                  <Text style={[styles.adminPriceName, { color: theme.text }]}>{plan.name}</Text>
                  <Text style={[styles.adminPriceDuration, { color: theme.textSecondary }]}>{plan.duration}</Text>
                </View>
                
                <View style={styles.adminPriceInputContainer}>
                  <Text style={[styles.adminPriceLabel, { color: theme.text }]}>Price:</Text>
                  <TextInput
                    style={[styles.adminPriceInput, { 
                      color: theme.text,
                      borderColor: theme.border,
                      backgroundColor: theme.inputBackground
                    }]}
                    value={plan.price}
                    onChangeText={(text) => {
                      const updatedPlans = [...subscriptionPlans];
                      updatedPlans[index] = { ...plan, price: text };
                      setSubscriptionPlans(updatedPlans);
                    }}
                    placeholder="Enter price"
                    placeholderTextColor={theme.textSecondary}
                  />
                </View>

                <View style={styles.adminPriceInputContainer}>
                  <Text style={[styles.adminPriceLabel, { color: theme.text }]}>Recommended:</Text>
                  <Switch
                    value={!!plan.recommended}
                    onValueChange={(value) => {
                      const updatedPlans = subscriptionPlans.map(p => {
                        if (p.id === plan.id) {
                          return { ...p, recommended: value };
                        } else if (value) {
                          // Remove recommended from others if this one is recommended
                          return { ...p, recommended: false };
                        }
                        return p;
                      });
                      
                      setSubscriptionPlans(updatedPlans);
                    }}
                    trackColor={{ false: isDarkMode ? "#2C2C2C" : "#D1D1D6", true: "#4B6BFE33" }}
                    thumbColor={plan.recommended ? "#4B6BFE" : isDarkMode ? "#FFFFFF" : "#F4F3F4"}
                    ios_backgroundColor={isDarkMode ? "#2C2C2C" : "#D1D1D6"}
                  />
                </View>
                
                <Text style={[styles.adminFeaturesTitle, { color: theme.text, marginTop: 10 }]}>Features:</Text>
                <View style={styles.featuresContainer}>
                  {plan.features.map((feature, featureIdx) => (
                    <View key={featureIdx}>
                      <View style={[styles.featureRow, {
                        backgroundColor: theme.inactiveItem,
                        borderRadius: 8,
                        borderWidth: 1,
                        borderColor: theme.border,
                        marginBottom: 8
                      }]}>
                        <TouchableOpacity 
                          onPress={() => {
                            if (expandedFeature?.planId === plan.id && expandedFeature?.featureIdx === featureIdx) {
                              setExpandedFeature(null);
                            } else {
                              setExpandedFeature({ planId: plan.id, featureIdx: featureIdx });
                            }
                          }}
                          style={styles.featureTextContainer}
                        >
                          <Text style={[styles.featureText, { color: theme.text }]}>{feature}</Text>
                        </TouchableOpacity>
                        
                        <View style={styles.featureActions}>
                          <TouchableOpacity 
                            style={[styles.editFeatureButton, { backgroundColor: theme.inputBackground }]}
                            onPress={() => {
                              setExpandedFeature({ planId: plan.id, featureIdx: featureIdx });
                            }}
                          >
                            <FontAwesome5 name="edit" size={16} color={theme.primary} />
                          </TouchableOpacity>
                          
                          <TouchableOpacity 
                            style={styles.removeFeatureButton}
                            onPress={() => {
                              if (plan.features.length > 1) {
                                const updatedPlans = [...subscriptionPlans];
                                const updatedFeatures = plan.features.filter((_, i) => i !== featureIdx);
                                updatedPlans[index] = { ...plan, features: updatedFeatures };
                                setSubscriptionPlans(updatedPlans);
                                setExpandedFeature(null);
                              } else {
                                Alert.alert('Cannot Remove', 'A plan must have at least one feature.');
                              }
                            }}
                          >
                            <FontAwesome5 name="minus-circle" size={18} color="#FF3B30" />
                          </TouchableOpacity>
                        </View>
                      </View>
                      
                      {expandedFeature && 
                       expandedFeature.planId === plan.id && 
                       expandedFeature.featureIdx === featureIdx && (
                        <View style={[styles.expandedFeatureContainer, {
                          backgroundColor: theme.inputBackground,
                          borderColor: theme.border
                        }]}>
                          <TextInput
                            style={[styles.expandedFeatureInput, { 
                              color: theme.text,
                              borderColor: theme.border,
                              backgroundColor: isDarkMode ? '#272727' : '#FFFFFF'
                            }]}
                            value={feature}
                            onChangeText={(text) => {
                              const updatedPlans = [...subscriptionPlans];
                              const updatedFeatures = [...plan.features];
                              updatedFeatures[featureIdx] = text;
                              updatedPlans[index] = { ...plan, features: updatedFeatures };
                              setSubscriptionPlans(updatedPlans);
                            }}
                            multiline
                            numberOfLines={3}
                            placeholder="Enter feature description"
                            placeholderTextColor={theme.textSecondary}
                          />
                          <View style={styles.expandedFeatureActions}>
                            <TouchableOpacity 
                              style={[styles.featureActionButton, { backgroundColor: theme.primary }]}
                              onPress={() => setExpandedFeature(null)}
                            >
                              <Text style={styles.featureActionButtonText}>Done</Text>
                            </TouchableOpacity>
                          </View>
                        </View>
                      )}
                    </View>
                  ))}
                </View>
                
                <TouchableOpacity 
                  style={[styles.addFeatureButton, { 
                    borderColor: theme.primary,
                    borderStyle: 'dashed',
                    backgroundColor: isDarkMode ? 'rgba(75, 107, 254, 0.1)' : 'rgba(75, 107, 254, 0.05)'
                  }]}
                  onPress={() => {
                    const updatedPlans = [...subscriptionPlans];
                    const updatedFeatures = [...plan.features, 'New Feature'];
                    updatedPlans[index] = { ...plan, features: updatedFeatures };
                    setSubscriptionPlans(updatedPlans);
                    setExpandedFeature({ 
                      planId: plan.id, 
                      featureIdx: updatedFeatures.length - 1 
                    });
                  }}
                >
                  <FontAwesome5 name="plus" size={14} color={theme.primary} />
                  <Text style={[styles.addFeatureText, { color: theme.primary }]}>Add Feature</Text>
                </TouchableOpacity>
              </View>
            ))}
            
            <View style={[styles.discountSection, { 
              backgroundColor: theme.inputBackground,
              borderColor: theme.border
            }]}>
              <Text style={[styles.discountTitle, { color: theme.text }]}>Student Discount</Text>
              
              <View style={styles.discountRow}>
                <Text style={[styles.discountLabel, { color: theme.textSecondary }]}>Enable Student Discount:</Text>
                <Switch
                  value={isStudentDiscountEnabled}
                  onValueChange={async (value) => {
                    setIsStudentDiscountEnabled(value);
                    await AsyncStorage.setItem('isStudentDiscountEnabled', value.toString());
                  }}
                  trackColor={{ false: isDarkMode ? "#2C2C2C" : "#D1D1D6", true: "#4B6BFE33" }}
                  thumbColor={isStudentDiscountEnabled ? "#4B6BFE" : isDarkMode ? "#FFFFFF" : "#F4F3F4"}
                  ios_backgroundColor={isDarkMode ? "#2C2C2C" : "#D1D1D6"}
                />
              </View>
              
              <View style={styles.discountRow}>
                <Text style={[styles.discountLabel, { color: theme.textSecondary }]}>Discount Percentage:</Text>
                <View style={styles.percentInputContainer}>
                  <TextInput
                    style={[styles.percentInput, { 
                      color: theme.text,
                      borderColor: theme.border,
                      backgroundColor: isDarkMode ? '#272727' : '#FFFFFF'
                    }]}
                    value={studentDiscountPercent.toString()}
                    onChangeText={async (text) => {
                      const value = parseInt(text, 10);
                      if (!isNaN(value) && value >= 0 && value <= 100) {
                        setStudentDiscountPercent(value);
                        await AsyncStorage.setItem('studentDiscountPercent', value.toString());
                      }
                    }}
                    keyboardType="numeric"
                    maxLength={3}
                    editable={isStudentDiscountEnabled}
                    placeholderTextColor={theme.textSecondary}
                  />
                  <Text style={[styles.percentSymbol, { color: theme.text }]}>%</Text>
                </View>
              </View>
            </View>
            
            <TouchableOpacity 
              style={[styles.adminSaveButton, { backgroundColor: theme.primary }]}
              onPress={() => saveSubscriptionPlans(subscriptionPlans)}
            >
              <Text style={styles.adminSaveButtonText}>Save Changes</Text>
            </TouchableOpacity>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );

  // Driver route management modal
  const renderRouteManagementModal = () => (
    <Modal
      animationType="slide"
      transparent={true}
      visible={showRouteManagementModal}
      onRequestClose={() => setShowRouteManagementModal(false)}
    >
      <View style={styles.modalOverlay}>
        <View style={[styles.modalContent, { maxHeight: '90%', backgroundColor: theme.card }]}>
          <LinearGradient
            colors={theme.gradientColors}
            style={styles.modalHeader}
          >
            <Text style={styles.modalTitle}>Manage Routes</Text>
            <TouchableOpacity 
              onPress={() => {
                setShowRouteManagementModal(false);
                setSelectedRoute(null);
              }}
              style={styles.closeButton}
            >
              <FontAwesome5 name="times" size={20} color="white" />
            </TouchableOpacity>
          </LinearGradient>
          
          <ScrollView style={styles.modalBody}>
            {routes.map((route) => (
              <View key={route.id} style={[styles.routeManagementItem, { 
                backgroundColor: theme.card, 
                borderColor: theme.border
              }]}>
                <View style={styles.routeManagementHeader}>
                  <View style={styles.routeManagementInfo}>
                    <Text style={[styles.routeManagementName, { color: theme.text }]}>{route.name}</Text>
                    <Text style={[styles.routeManagementDesc, { color: theme.textSecondary }]}>{route.description}</Text>
                    <View style={styles.routeManagementBadge}>
                      <FontAwesome5 
                        name={vehicleTypes.find(v => v.id === route.vehicleType)?.icon || 'bus'} 
                        size={12} 
                        color="#4B6BFE" 
                      />
                      <Text style={styles.routeManagementBadgeText}>
                        {vehicleTypes.find(v => v.id === route.vehicleType)?.name || 'Bus'}
                      </Text>
                    </View>
                  </View>
                  
                  <View style={styles.routeManagementActions}>
                    <TouchableOpacity 
                      style={[
                        styles.routeManagementStatusButton, 
                        { backgroundColor: route.active ? '#E8EDFF' : (isDarkMode ? '#333333' : '#F5F5F5') }
                      ]}
                      onPress={() => toggleRouteActive(route.id, !route.active)}
                    >
                      <FontAwesome5 
                        name={route.active ? 'toggle-on' : 'toggle-off'} 
                        size={18} 
                        color={route.active ? '#4B6BFE' : '#999'} 
                      />
                      <Text 
                        style={[
                          styles.routeManagementStatusText, 
                          { color: route.active ? '#4B6BFE' : '#999' }
                        ]}
                      >
                        {route.active ? 'Active' : 'Inactive'}
                      </Text>
                    </TouchableOpacity>
                    
                    <TouchableOpacity 
                      style={styles.routeManagementEditButton}
                      onPress={() => {
                        // In a real app, this would open a form to edit the route
                        Alert.alert('Edit Route', 'Route editing would be implemented in a complete version');
                      }}
                    >
                      <FontAwesome5 name="edit" size={16} color="#4B6BFE" />
                    </TouchableOpacity>
                    
                    <TouchableOpacity 
                      style={styles.routeManagementDeleteButton}
                      onPress={() => {
                        Alert.alert(
                          'Delete Route',
                          'Are you sure you want to delete this route?',
                          [
                            { text: 'Cancel', style: 'cancel' },
                            { text: 'Delete', style: 'destructive', onPress: () => deleteRoute(route.id) }
                          ]
                        );
                      }}
                    >
                      <FontAwesome5 name="trash-alt" size={16} color="#FF3B30" />
                    </TouchableOpacity>
                  </View>
                </View>
                
                <View style={styles.stopsContainer}>
                  <Text style={[styles.stopsTitle, { color: theme.text }]}>Stops ({route.stops.length})</Text>
                  {route.stops.map((stop, index) => (
                    <View key={index} style={styles.stopItem}>
                      <View style={styles.stopDot} />
                      <Text style={[styles.stopName, { color: theme.textSecondary }]}>{stop.name}</Text>
                    </View>
                  ))}
                </View>
              </View>
            ))}
            
            <TouchableOpacity 
              style={styles.addRouteButton}
              onPress={() => {
                // In a real app, this would open a form to add a new route
                Alert.alert('Add Route', 'Route creation would be implemented in a complete version');
              }}
            >
              <FontAwesome5 name="plus" size={16} color="white" />
              <Text style={styles.addRouteButtonText}>Add New Route</Text>
            </TouchableOpacity>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );

  // Function for requesting a ride - only available for passengers
  const requestRide = async () => {
    if (!selectedDestination || !selectedVehicleType || isRequestingRide) return;
    
    setIsRequestingRide(true);
    
    try {
      // In a real app, this would send the request to a backend
      // For demo, we'll update the local state
      
      const newRideStatus = {
        id: user?.id || 'user',
        status: 'waiting' as const, // Type assertion for status
        driver: null,
        vehicle: null,
        pickupLocation: location?.coords,
        destination: selectedDestination,
        requestTime: new Date().toISOString(),
      };
      
      await AsyncStorage.setItem('rideStatus', JSON.stringify(newRideStatus));
      setMyRideStatus({ status: 'waiting' }); // Set status with correct type
      setShowRequestRideModal(false);
      setShowMyRideModal(true);
      
      Alert.alert(
        'Ride Requested!', 
        'Your ride has been requested. We are looking for a driver nearby.'
      );
    } catch (error) {
      console.error('Error requesting ride:', error);
      Alert.alert('Error', 'Could not request a ride. Please try again.');
    }
  };
  
  // Driver accepts a passenger
  const acceptPassenger = async (passengerId: string) => {
    try {
      // Find the selected vehicle (in a real app, this would be the driver's vehicle)
      const driverVehicle = vehicles.find(v => v.id === 1); // Just use the first vehicle for demo
      
      if (!driverVehicle) {
        Alert.alert('Error', 'No vehicle available to assign.');
        return;
      }
      
      // Update the passenger status
      const updatedPassengers = passengers.map(p => 
        p.id === passengerId 
          ? { ...p, status: 'assigned' as const, vehicleId: driverVehicle.id } 
          : p
      );
      
      setPassengers(updatedPassengers as Passenger[]); // Fix: explicitly cast as Passenger[]
      
      // If this is the current user's ride, update their status
      if (passengerId === user?.id) {
        setMyRideStatus({ 
          status: 'assigned', 
          vehicle: driverVehicle,
          eta: calculateETA(driverVehicle, location?.coords)
        });
      }
      
      // Store in AsyncStorage
      await AsyncStorage.setItem('passengers', JSON.stringify(updatedPassengers));
      
      Alert.alert('Passenger Accepted', 'You will pick up this passenger. Navigate to their location.');
    } catch (error) {
      console.error('Error accepting passenger:', error);
      Alert.alert('Error', 'Failed to accept passenger. Please try again.');
    }
  };
  
  // Driver marks passenger as picked up
  const pickupPassenger = async (passengerId: string) => {
    try {
      const updatedPassengers = passengers.map(p => 
        p.id === passengerId 
          ? { ...p, status: 'picked_up' as const } 
          : p
      );
      
      setPassengers(updatedPassengers as Passenger[]); // Fix: explicitly cast as Passenger[]
      
      // If this is the current user's ride, update their status
      if (passengerId === user?.id) {
        setMyRideStatus({ 
          status: 'picked_up', 
          vehicle: vehicles.find(v => v.id === passengers.find(p => p.id === passengerId)?.vehicleId)
        });
      }
      
      // Store in AsyncStorage
      await AsyncStorage.setItem('passengers', JSON.stringify(updatedPassengers));
      
      Alert.alert('Passenger Picked Up', 'The passenger has been picked up successfully.');
    } catch (error) {
      console.error('Error picking up passenger:', error);
      Alert.alert('Error', 'Failed to mark passenger as picked up. Please try again.');
    }
  };
  
  // Calculate ETA between vehicle and location
  const calculateETA = (vehicle: Vehicle, location?: { latitude: number; longitude: number }) => {
    if (!location) return 'Unknown';
    
    // In a real app, this would use a routing API to get accurate ETA
    // For demo purposes, we'll use a simple distance-based calculation
    const dx = vehicle.location.latitude - location.latitude;
    const dy = vehicle.location.longitude - location.longitude;
    const distance = Math.sqrt(dx * dx + dy * dy);
    
    // Convert to minutes (simple approximation)
    const minutes = Math.round(distance * 1000);
    
    if (minutes < 1) return 'Less than 1 min';
    return `${minutes} min`;
  };

  // Request ride modal for passengers
  const renderRequestRideModal = () => {
    // Don't render the Request Ride modal for admin users
    if (user?.role === 'admin') return null;
    
    return (
      <Modal
        animationType="slide"
        transparent={true}
        visible={showRequestRideModal}
        onRequestClose={() => setShowRequestRideModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContent, { backgroundColor: theme.card, maxHeight: '85%' }]}>
            <LinearGradient
              colors={theme.gradientColors}
              style={styles.modalHeader}
            >
              <Text style={styles.modalTitle}>Request a Ride</Text>
              <TouchableOpacity 
                onPress={() => setShowRequestRideModal(false)}
                style={styles.closeButton}
              >
                <FontAwesome5 name="times" size={20} color="white" />
              </TouchableOpacity>
            </LinearGradient>
            
            <View style={styles.modalBody}>
              <View style={[styles.rideLocationContainer, { borderBottomColor: theme.border, borderBottomWidth: 1, paddingBottom: 15 }]}>
                <View style={styles.rideLocationRow}>
                  <View style={styles.rideLocationDot} />
                  <View style={styles.rideLocationTextContainer}>
                    <Text style={[styles.rideLocationLabel, { color: theme.textSecondary }]}>Your location</Text>
                    <Text style={[styles.rideLocationValue, { color: theme.text }]}>
                      {location ? 'Current Location' : 'Loading...'}
                    </Text>
                  </View>
                </View>
                
                <View style={[styles.rideLocationDashedLine, { backgroundColor: theme.border }]} />
                
                <View style={styles.rideLocationRow}>
                  <View style={[styles.rideLocationDot, { backgroundColor: '#FF3B30' }]} />
                  <View style={styles.rideLocationTextContainer}>
                    <Text style={[styles.rideLocationLabel, { color: theme.textSecondary }]}>Destination</Text>
                    <TouchableOpacity 
                      style={[styles.selectDestinationButton, { borderBottomColor: theme.border }]}
                      onPress={() => setShowDestinationModal(true)}
                    >
                      <Text style={[styles.selectDestinationText, { 
                        color: selectedDestination ? theme.text : '#999' 
                      }]}>
                        {selectedDestination ? selectedDestination.name : 'Select destination'}
                      </Text>
                      <FontAwesome5 name="chevron-right" size={14} color="#999" />
                    </TouchableOpacity>
                  </View>
                </View>
              </View>
              
              <View style={styles.rideOptionContainer}>
                <Text style={[styles.rideOptionTitle, { color: theme.text }]}>Available Vehicles</Text>
                {vehicleTypes.map(type => (
                  <TouchableOpacity 
                    key={type.id}
                    style={[
                      styles.rideOptionItem,
                      { borderColor: theme.border, backgroundColor: theme.card },
                      selectedVehicleType === type.id && [
                        styles.rideOptionItemSelected,
                        { backgroundColor: isDarkMode ? '#2A3451' : '#F5F8FF' }
                      ]
                    ]}
                    onPress={() => setSelectedVehicleType(type.id)}
                  >
                    <View style={styles.rideOptionIcon}>
                      <FontAwesome5 name={type.icon} size={20} color="#4B6BFE" />
                    </View>
                    <View style={styles.rideOptionInfo}>
                      <Text style={[styles.rideOptionName, { color: theme.text }]}>{type.name}</Text>
                      <Text style={[styles.rideOptionETA, { color: theme.textSecondary }]}>
                        {vehicles.some(v => v.type === type.id) ? 'Available' : 'No vehicles nearby'}
                      </Text>
                    </View>
                    {selectedVehicleType === type.id && (
                      <FontAwesome5 name="check-circle" size={20} color="#4B6BFE" />
                    )}
                  </TouchableOpacity>
                ))}
              </View>
              
              <TouchableOpacity 
                style={[
                  styles.requestRideButton,
                  (!selectedDestination || !selectedVehicleType || isRequestingRide) && 
                    styles.requestRideButtonDisabled
                ]}
                onPress={requestRide}
                disabled={!selectedDestination || !selectedVehicleType || isRequestingRide}
              >
                {isRequestingRide ? (
                  <ActivityIndicator size="small" color="white" />
                ) : (
                  <Text style={styles.requestRideButtonText}>Request Ride</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    );
  };

  // My ride status display for passengers
  const renderMyRideStatus = () => {
    if (myRideStatus.status === 'none') return null;
    
    return (
      <View style={[styles.myRideContainer, { backgroundColor: theme.card }]}>
        <LinearGradient
          colors={theme.gradientColors}
          style={styles.myRideHeader}
          start={{ x: 0, y: 0 }}
          end={{ x: 1, y: 0 }}
        >
          <Text style={styles.myRideTitle}>
            {myRideStatus.status === 'waiting' ? 'Searching for Driver' :
             myRideStatus.status === 'assigned' ? 'Driver On the Way' :
             'On Journey'}
          </Text>
          <TouchableOpacity 
            style={styles.myRideCloseButton}
            onPress={() => {
              // Cancel ride
              Alert.alert(
                'Cancel Ride',
                'Are you sure you want to cancel your ride?',
                [
                  { text: 'No', style: 'cancel' },
                  { 
                    text: 'Yes', 
                    style: 'destructive',
                    onPress: () => {
                      // In a real app, this would notify the backend/driver
                      setMyRideStatus({ status: 'none' });
                      
                      // Remove the passenger from the list
                      const updatedPassengers = passengers.filter(p => p.id !== user?.id);
                      setPassengers(updatedPassengers);
                      AsyncStorage.setItem('passengers', JSON.stringify(updatedPassengers));
                    }
                  }
                ]
              );
            }}
          >
            <FontAwesome5 name="times" size={16} color="white" />
          </TouchableOpacity>
        </LinearGradient>
        
        <View style={styles.myRideBody}>
          {myRideStatus.status === 'waiting' ? (
            <View style={styles.myRideSearching}>
              <ActivityIndicator size="large" color="#4B6BFE" />
              <Text style={[styles.myRideSearchingText, { color: theme.textSecondary }]}>
                Looking for available drivers...
              </Text>
            </View>
          ) : (
            <>
              <View style={styles.myRideDriverInfo}>
                <View style={styles.myRideDriverIconContainer}>
                  <FontAwesome5 
                    name={myRideStatus.vehicle?.type === 'bus' ? 'bus' : 'shuttle-van'} 
                    size={20} 
                    color="white" 
                  />
                </View>
                <View style={styles.myRideDriverDetails}>
                  <Text style={[styles.myRideDriverName, { color: theme.text }]}>
                    {myRideStatus.vehicle?.name}
                  </Text>
                  {myRideStatus.eta && (
                    <Text style={[styles.myRideDriverETA, { color: theme.textSecondary }]}>
                      Estimated arrival: {myRideStatus.eta}
                    </Text>
                  )}
                </View>
              </View>
              
              <TouchableOpacity 
                style={[styles.myRideTrackButton, {
                  backgroundColor: isDarkMode ? '#2A3451' : '#E8EDFF'
                }]}
                onPress={() => {
                  // In a real app, this would focus the map on the driver
                  Alert.alert('Tracking Driver', 'This would center the map on your driver location.');
                }}
              >
                <FontAwesome5 name="location-arrow" size={16} color="#4B6BFE" />
                <Text style={styles.myRideTrackButtonText}>Track on Map</Text>
              </TouchableOpacity>
            </>
          )}
        </View>
      </View>
    );
  };

  // Add new state for destination modal
  const [showDestinationModal, setShowDestinationModal] = useState(false);
  const [destinationSearchText, setDestinationSearchText] = useState('');
  const [suggestedDestinations, setSuggestedDestinations] = useState<Array<{
    name: string;
    latitude: number;
    longitude: number;
  }>>([
    { name: 'Harbor View', latitude: 37.78625, longitude: -122.4314 },
    { name: 'Market Square', latitude: 37.78925, longitude: -122.4344 },
    { name: 'Central Station', latitude: 37.78825, longitude: -122.4324 },
    { name: 'Tech Plaza', latitude: 37.78525, longitude: -122.4124 },
    { name: 'Ocean Heights', latitude: 37.79025, longitude: -122.4244 }
  ]);

  // Destination selection modal
  const renderDestinationModal = () => (
    <Modal
      animationType="slide"
      transparent={true}
      visible={showDestinationModal}
      onRequestClose={() => setShowDestinationModal(false)}
    >
      <View style={styles.modalOverlay}>
        <View style={[styles.modalContent, { backgroundColor: theme.card, height: height * 0.7 }]}>
          <LinearGradient
            colors={theme.gradientColors}
            style={styles.modalHeader}
          >
            <Text style={styles.modalTitle}>Select Destination</Text>
            <TouchableOpacity 
              onPress={() => setShowDestinationModal(false)}
              style={styles.closeButton}
            >
              <FontAwesome5 name="times" size={20} color="white" />
            </TouchableOpacity>
          </LinearGradient>
          
          <View style={styles.modalBody}>
            <View style={[styles.searchBarContainer, { borderColor: theme.border }]}>
              <FontAwesome5 name="search" size={16} color="#999" />
              <TextInput
                style={[styles.searchInput, { color: theme.text }]}
                placeholder="Search for a destination..."
                placeholderTextColor="#999"
                value={destinationSearchText}
                onChangeText={setDestinationSearchText}
              />
              {destinationSearchText.length > 0 && (
                <TouchableOpacity onPress={() => setDestinationSearchText('')}>
                  <FontAwesome5 name="times-circle" size={16} color="#999" />
                </TouchableOpacity>
              )}
            </View>
            
            <View style={styles.destinationTabsContainer}>
              <TouchableOpacity 
                style={[styles.destinationTab, styles.destinationTabActive]}
              >
                <Text style={styles.destinationTabText}>List</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.destinationTab}
                onPress={() => {
                  // In a complete implementation, this would switch to a map view
                  Alert.alert('Map View', 'Map selection would be implemented in a production version.');
                }}
              >
                <Text style={styles.destinationTabText}>Map</Text>
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.destinationList}>
              {suggestedDestinations
                .filter(place => 
                  destinationSearchText === '' || 
                  place.name.toLowerCase().includes(destinationSearchText.toLowerCase())
                )
                .map((place, index) => (
                  <TouchableOpacity 
                    key={index}
                    style={[styles.destinationItem, { borderBottomColor: theme.border }]}
                    onPress={() => {
                      setSelectedDestination(place);
                      setShowDestinationModal(false);
                    }}
                  >
                    <View style={styles.destinationIconContainer}>
                      <FontAwesome5 name="map-marker-alt" size={18} color="#4B6BFE" />
                    </View>
                    <View style={styles.destinationInfo}>
                      <Text style={[styles.destinationName, { color: theme.text }]}>{place.name}</Text>
                    </View>
                    <FontAwesome5 name="chevron-right" size={14} color="#999" />
                  </TouchableOpacity>
                ))}
              
              {suggestedDestinations.filter(place => 
                destinationSearchText !== '' && 
                place.name.toLowerCase().includes(destinationSearchText.toLowerCase())
              ).length === 0 && destinationSearchText !== '' && (
                <View style={styles.noResultsContainer}>
                  <FontAwesome5 name="search" size={40} color="#DDDDDD" />
                  <Text style={[styles.noResultsText, { color: theme.textSecondary }]}>
                    No results found
                  </Text>
                </View>
              )}
            </ScrollView>
            
            <TouchableOpacity 
              style={styles.useCurrentLocationButton}
              onPress={() => {
                // Set a custom destination near the user's location
                if (location) {
                  const userLat = location.coords.latitude;
                  const userLng = location.coords.longitude;
                  
                  // Create a custom destination
                  const customPlace = {
                    name: 'Custom Location',
                    latitude: userLat + (Math.random() * 0.01 - 0.005), // Random position near user
                    longitude: userLng + (Math.random() * 0.01 - 0.005)
                  };
                  
                  setSelectedDestination(customPlace);
                  setShowDestinationModal(false);
                  
                  // In a real implementation, this would use reverse geocoding
                  // to get the actual address of the selected location
                  Alert.alert('Custom Location', 'Selected a location near you. In a production app, this would use reverse geocoding to get the actual address.');
                }
              }}
            >
              <FontAwesome5 name="location-arrow" size={16} color="#4B6BFE" style={{ marginRight: 10 }} />
              <Text style={styles.useCurrentLocationText}>Drop Pin Near Me</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );

  // New state for admin dashboard
  const [showAdminDashboard, setShowAdminDashboard] = useState(true);
  
  // Function to render admin dashboard overlay
  const renderAdminDashboard = () => {
    if (!user || user.role !== 'admin') return null;
    
    return (
      <View style={[styles.adminDashboardOverlay, { backgroundColor: isDarkMode ? 'rgba(0, 0, 0, 0.9)' : 'rgba(255, 255, 255, 0.9)' }]}>
        <View style={[styles.adminDashboardContent, { backgroundColor: theme.card }]}>
          <FontAwesome5 name="tools" size={60} color="#4B6BFE" />
          <Text style={[styles.adminDashboardTitle, { color: theme.text }]}>Admin Dashboard</Text>
          <Text style={[styles.adminDashboardSubtitle, { color: theme.textSecondary }]}>
            Welcome to the Administration Panel
          </Text>
          
          <View style={styles.adminActionButtons}>
            <TouchableOpacity 
              style={[styles.adminActionButton, { backgroundColor: '#4B6BFE' }]}
              onPress={() => setShowAdminPriceModal(true)}
            >
              <FontAwesome5 name="tags" size={20} color="white" style={{ marginBottom: 10 }} />
              <Text style={styles.adminActionText}>Manage Subscriptions</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.adminActionButton, { backgroundColor: '#34A853' }]}
              onPress={() => router.push('/admin')}
            >
              <FontAwesome5 name="cog" size={20} color="white" style={{ marginBottom: 10 }} />
              <Text style={styles.adminActionText}>Admin Dashboard</Text>
            </TouchableOpacity>
          </View>
          
          <TouchableOpacity 
            style={[
              styles.toggleMapButton,
              { backgroundColor: theme.card }
            ]}
            onPress={() => setShowAdminDashboard(!showAdminDashboard)}
          >
            <Text style={styles.toggleMapButtonText}>
              {showAdminDashboard ? "Show Map View" : "Show Admin Dashboard"}
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  };
  
  useEffect(() => {
    // Set showAdminDashboard to true for admin users on component mount
    if (user?.role === 'admin') {
      setShowAdminDashboard(true);
    }
  }, [user]);
  
  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <StatusBar barStyle={isDarkMode ? "light-content" : "dark-content"} />
      
      {isLoading ? (
        <View style={[styles.loadingContainer, { backgroundColor: theme.background }]}>
          <ActivityIndicator size="large" color="#4B6BFE" />
          <Text style={[styles.loadingText, { color: theme.text }]}>Getting your location...</Text>
        </View>
      ) : errorMsg ? (
        <View style={[styles.errorContainer, { backgroundColor: theme.background }]}>
          <FontAwesome5 name="exclamation-circle" size={50} color="#FF3B30" />
          <Text style={[styles.errorText, { color: theme.text }]}>{errorMsg}</Text>
          <TouchableOpacity 
            style={styles.retryButton}
            onPress={() => {
              setErrorMsg(null);
              setIsLoading(true);
              // Retry getting location
              Location.getCurrentPositionAsync({})
                .then(location => {
                  setLocation(location);
                  setIsLoading(false);
                })
                .catch(() => {
                  setErrorMsg('Could not get your location. Please try again.');
                  setIsLoading(false);
                });
            }}
          >
            <Text style={styles.retryButtonText}>Retry</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <>
          <MapView
            style={styles.map}
            provider={PROVIDER_GOOGLE}
            customMapStyle={theme.mapStyle}
            initialRegion={{
              latitude: location?.coords?.latitude || 37.78825,
              longitude: location?.coords?.longitude || -122.4324,
              latitudeDelta: 0.0122,
              longitudeDelta: 0.0121,
            }}
          >
            {location && (
              <Marker
                coordinate={{
                  latitude: location.coords.latitude,
                  longitude: location.coords.longitude,
                }}
                title="Your Location"
              >
                <View style={styles.myLocationMarker}>
                  <View style={styles.myLocationDot} />
                </View>
              </Marker>
            )}
            
            {/* Only render vehicles for non-admin users */}
            {user?.role !== 'admin' && vehicles.map((vehicle) => (
              <Marker
                key={vehicle.id}
                coordinate={vehicle.location}
                title={vehicle.name}
                description={`ETA: ${vehicle.eta}`}
              >
                <View style={[styles.vehicleMarker, { 
                  backgroundColor: vehicle.type === 'bus' ? '#4B6BFE' : '#3451E1',
                  width: user?.role === 'passenger' ? 45 : 35, // Make vehicles more visible to passengers
                  height: user?.role === 'passenger' ? 45 : 35,
                  borderRadius: user?.role === 'passenger' ? 22.5 : 17.5,
                  borderWidth: user?.role === 'passenger' ? 3 : 2,
                  shadowOpacity: user?.role === 'passenger' ? 0.4 : 0.2
                }]}>
                  <FontAwesome5 
                    name={vehicle.type === 'bus' ? 'bus' : 'shuttle-van'} 
                    size={user?.role === 'passenger' ? 20 : 16} 
                    color="white" 
                  />
                </View>
              </Marker>
            ))}
            
            {/* Display route paths and stops */}
            {user?.role !== 'driver' && hasSubscription && routes.filter(r => r.active).map((route) => (
              <React.Fragment key={route.id}>
                <Polyline
                  coordinates={route.path}
                  strokeWidth={4}
                  strokeColor="#4B6BFE"
                  lineDashPattern={[1]}
                />
                {route.stops.map((stop, index) => (
                  <Marker
                    key={`stop-${route.id}-${index}`}
                    coordinate={stop.coordinates}
                    title={stop.name}
                  >
                    <View style={styles.stopMarker}>
                      <FontAwesome5 name="map-pin" size={16} color="#4B6BFE" />
                    </View>
                  </Marker>
                ))}
              </React.Fragment>
            ))}

            {/* Display passenger locations for drivers */}
            {user?.role === 'driver' && passengers.map((passenger) => (
              <Marker
                key={`passenger-${passenger.id}`}
                coordinate={passenger.location}
                title={passenger.name}
                description={`Status: ${passenger.status.charAt(0).toUpperCase() + passenger.status.slice(1)}`}
              >
                <View style={[styles.passengerMarker, {
                  backgroundColor: passenger.status === 'waiting' ? '#FF3B30' : 
                                   passenger.status === 'assigned' ? '#FFCC00' : '#4CD964',
                  width: 45, // Make passengers more visible to drivers
                  height: 45,
                  borderRadius: 22.5,
                  borderWidth: 3,
                  shadowOpacity: 0.4,
                  shadowRadius: 5
                }]}>
                  <FontAwesome5 name="user" size={18} color="white" />
                  {passenger.destination && (
                    <View style={styles.passengerDestinationMarker}>
                      <FontAwesome5 name="map-marker-alt" size={12} color="white" />
                    </View>
                  )}
                </View>
              </Marker>
            ))}
            
            {/* Add passenger destination pins if applicable */}
            {user?.role === 'driver' && passengers
              .filter(p => p.destination && (p.status === 'assigned' || p.status === 'picked_up'))
              .map((passenger) => passenger.destination && (
                <Marker
                  key={`destination-${passenger.id}`}
                  coordinate={passenger.destination}
                  title={`${passenger.name}'s Destination`}
                  description={passenger.destination.name}
                >
                  <View style={styles.destinationMarker}>
                    <FontAwesome5 name="flag-checkered" size={16} color="#FF3B30" />
                  </View>
                </Marker>
              ))
            }
          </MapView>

          {/* Display admin dashboard for admin users when showAdminDashboard is true */}
          {user?.role === 'admin' && showAdminDashboard && renderAdminDashboard()}

          {/* No subscription overlay - only for passengers */}
          {user?.role === 'passenger' && !hasSubscription && renderNoSubscriptionOverlay()}

          <View style={styles.headerContainer}>
            <LinearGradient
              colors={theme.gradientColors}
              style={styles.header}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
            >
              <Text style={styles.title}>PARAda</Text>
              
              {/* Subscription badge only for passengers */}
              {user?.role === 'passenger' && hasSubscription && (
                <TouchableOpacity
                  style={styles.subscriptionBadge}
                  onPress={() => setShowVehicleTypeModal(true)}
                >
                  <FontAwesome5 
                    name={vehicleTypes.find(v => v.id === selectedVehicleType)?.icon || 'bus'} 
                    size={14} 
                    color="#fff" 
                    style={styles.subscriptionIcon}
                  />
                  <Text style={styles.subscriptionText}>
                    {selectedSubscription ? 
                      selectedSubscription.charAt(0).toUpperCase() + selectedSubscription.slice(1) 
                      : ''}
                  </Text>
                </TouchableOpacity>
              )}

              {/* Admin badge */}
              {user?.role === 'admin' && (
                <TouchableOpacity
                  style={styles.adminBadge}
                  onPress={openAdminSubscriptionModal}
                >
                  <FontAwesome5 
                    name="crown" 
                    size={14} 
                    color="#fff" 
                    style={styles.adminIcon}
                  />
                  <Text style={styles.adminBadgeText}>
                    Admin Access
                  </Text>
                </TouchableOpacity>
              )}

              {/* Driver dashboard badge */}
              {user?.role === 'driver' && (
                <TouchableOpacity
                  style={styles.driverBadge}
                  onPress={() => setShowRouteManagementModal(true)}
                >
                  <FontAwesome5 
                    name="route" 
                    size={14} 
                    color="#fff" 
                    style={styles.driverIcon}
                  />
                  <Text style={styles.driverBadgeText}>
                    Driver Mode
                  </Text>
                </TouchableOpacity>
              )}
            </LinearGradient>
          </View>

          {/* Shared functionality for all users */}
          <TouchableOpacity 
            style={styles.currentLocationButton} 
            onPress={() => {
              if (location) {
                // Re-center the map to user's location
              }
            }}
          >
            <FontAwesome5 name="location-arrow" size={20} color="#4B6BFE" />
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.feedbackButton} 
            onPress={() => setShowFeedback(true)}
          >
            <LinearGradient
              colors={['#4B6BFE', '#3451E1']}
              style={styles.feedbackGradient}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <FontAwesome5 name="comment-alt" size={20} color="white" />
            </LinearGradient>
          </TouchableOpacity>

          {renderRoleSpecificActions()}

          {/* Bottom sheet - enhanced for better passenger experience */}
          {user?.role === 'passenger' && hasSubscription && (
            <Animated.View 
              style={[styles.bottomSheet, { 
                height: bottomSheetHeight,
                backgroundColor: theme.card 
              }]}
              {...panResponder.panHandlers}
            >
              <View style={styles.bottomSheetHandle}>
                <View style={[styles.handleBar, { backgroundColor: isDarkMode ? '#555' : '#DDD' }]} />
              </View>
              <Text style={[styles.bottomSheetTitle, { color: theme.text }]}>Nearby Vehicles</Text>
              
              {/* Request ride button inside bottom sheet - only for passengers */}
              {user?.role === 'passenger' && (
                <TouchableOpacity
                  style={styles.requestRideButtonInBottomSheet}
                  onPress={() => setShowRequestRideModal(true)}
                >
                  <LinearGradient
                    colors={theme.gradientColors}
                    style={styles.requestRideGradient}
                    start={{ x: 0, y: 0 }}
                    end={{ x: 1, y: 0 }}
                  >
                    <FontAwesome5 name="taxi" size={16} color="white" style={{ marginRight: 8 }} />
                    <Text style={styles.requestRideText}>Request a Ride</Text>
                  </LinearGradient>
                </TouchableOpacity>
              )}
              
              <ScrollView style={styles.vehiclesList} showsVerticalScrollIndicator={false}>
                {vehicles.length > 0 ? (
                  vehicles.map((vehicle) => (
                    <TouchableOpacity
                      key={vehicle.id}
                      style={[styles.vehicleItem, { borderBottomColor: theme.border }]}
                      onPress={() => sendNotification(vehicle)}
                      activeOpacity={0.7}
                    >
                      <View style={[styles.vehicleIconContainer, {
                        backgroundColor: vehicle.type === 'bus' ? '#4B6BFE' : '#3451E1'
                      }]}>
                        <FontAwesome5 
                          name={vehicle.type === 'bus' ? 'bus' : 'shuttle-van'} 
                          size={18} 
                          color="white" 
                        />
                      </View>
                      <View style={styles.vehicleInfo}>
                        <Text style={[styles.vehicleName, { color: theme.text }]}>{vehicle.name}</Text>
                        <Text style={[styles.vehicleEta, { color: theme.textSecondary }]}>ETA: {vehicle.eta}</Text>
                      </View>
                      <TouchableOpacity 
                        style={styles.notifyButton}
                        onPress={() => sendNotification(vehicle)}
                      >
                        <FontAwesome5 name="bell" size={16} color="#4B6BFE" />
                        <Text style={styles.notifyText}>Notify</Text>
                      </TouchableOpacity>
                    </TouchableOpacity>
                  ))
                ) : (
                  <View style={styles.noVehiclesContainer}>
                    <FontAwesome5 name="bus" size={40} color="#DDDDDD" />
                    <Text style={[styles.noVehiclesText, { color: theme.textSecondary }]}>
                      No vehicles available in your area
                    </Text>
                  </View>
                )}
              </ScrollView>
            </Animated.View>
          )}

          {/* Driver-specific bottom sheet */}
          {user?.role === 'driver' && (
            <Animated.View 
              style={[styles.bottomSheet, { 
                height: bottomSheetHeight,
                backgroundColor: theme.card 
              }]}
              {...panResponder.panHandlers}
            >
              <View style={styles.bottomSheetHandle}>
                <View style={styles.handleBar} />
              </View>
              <Text style={[styles.bottomSheetTitle, { color: theme.text }]}>Passenger Requests</Text>
              <ScrollView style={styles.vehiclesList} showsVerticalScrollIndicator={false}>
                {passengers.filter(p => p.status === 'waiting').map((passenger) => (
                  <View
                    key={passenger.id}
                    style={[styles.passengerItem, { borderBottomColor: theme.border }]}
                  >
                    <View style={styles.passengerIconContainer}>
                      <FontAwesome5 name="user" size={16} color="white" />
                    </View>
                    <View style={styles.passengerInfo}>
                      <Text style={[styles.passengerName, { color: theme.text }]}>{passenger.name}</Text>
                      
                      <View style={styles.passengerDetailRow}>
                        <FontAwesome5 name="map-marker-alt" size={12} color="#666" />
                        <Text style={styles.passengerDetailText}>
                          {passenger.destination?.name || 'Unknown destination'}
                        </Text>
                      </View>
                      
                      <View style={styles.passengerDetailRow}>
                        <FontAwesome5 name="clock" size={12} color="#666" />
                        <Text style={styles.passengerDetailText}>
                          {new Date(passenger.requestTime).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                        </Text>
                      </View>
                    </View>
                    
                    {passenger.status === 'waiting' && (
                      <TouchableOpacity 
                        style={styles.acceptButton}
                        onPress={() => acceptPassenger(passenger.id)}
                      >
                        <Text style={styles.acceptButtonText}>Accept</Text>
                      </TouchableOpacity>
                    )}
                    
                    {passenger.status === 'assigned' && (
                      <TouchableOpacity 
                        style={styles.pickupButton}
                        onPress={() => pickupPassenger(passenger.id)}
                      >
                        <Text style={styles.pickupButtonText}>Pick Up</Text>
                      </TouchableOpacity>
                    )}
                  </View>
                ))}

                {passengers.filter(p => p.status === 'waiting').length === 0 && (
                  <View style={styles.noPassengersContainer}>
                    <FontAwesome5 name="users" size={40} color="#DDDDDD" />
                    <Text style={[styles.noPassengersText, { color: theme.textSecondary }]}>
                      No passenger requests at this time
                    </Text>
                  </View>
                )}
              </ScrollView>
            </Animated.View>
          )}

          <FeedbackForm 
            isVisible={showFeedback} 
            onClose={() => setShowFeedback(false)} 
          />
          
          {/* Only show these modals for passengers */}
          {user?.role !== 'driver' && (
            <>
              {renderVehicleTypeModal()}
              {renderSubscriptionModal()}
              {renderRequestRideModal()}
              {renderMyRideStatus()}
              {renderDestinationModal()}
            </>
          )}
          
          {/* Show for admin role */}
          {user?.role === 'admin' && renderAdminPriceModal()}
          
          {/* Show for driver role */}
          {user?.role === 'driver' && renderRouteManagementModal()}
        </>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    marginTop: 20,
    fontSize: 16,
    textAlign: 'center',
  },
  retryButton: {
    marginTop: 20,
    paddingVertical: 12,
    paddingHorizontal: 30,
    backgroundColor: '#4B6BFE',
    borderRadius: 25,
  },
  retryButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  map: {
    width: '100%',
    height: '100%',
  },
  headerContainer: {
    position: 'absolute',
    top: 60,
    left: 0,
    right: 0,
    alignItems: 'center',
    zIndex: 10,
    paddingHorizontal: 20,
  },
  header: {
    paddingVertical: 15,
    paddingHorizontal: 25,
    borderRadius: 30,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
    elevation: 5,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: '100%',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  subscriptionBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 15,
    marginLeft: 10,
  },
  subscriptionIcon: {
    marginRight: 5,
  },
  subscriptionText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  bottomSheet: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingHorizontal: 20,
    paddingBottom: 25,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -3 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 10,
  },
  bottomSheetHandle: {
    alignItems: 'center',
    paddingVertical: 10,
  },
  handleBar: {
    width: 40,
    height: 5,
    backgroundColor: '#DDD',
    borderRadius: 3,
  },
  bottomSheetTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
  },
  vehicleItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 1,
  },
  vehicleIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#4B6BFE',
  },
  vehicleInfo: {
    flex: 1,
    marginLeft: 15,
  },
  vehicleName: {
    fontSize: 16,
    fontWeight: '600',
  },
  vehicleEta: {
    fontSize: 14,
    marginTop: 3,
  },
  notifyButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    backgroundColor: '#E8EDFF',
    borderRadius: 20,
  },
  notifyText: {
    marginLeft: 5,
    fontSize: 14,
    color: '#4B6BFE',
    fontWeight: '500',
  },
  feedbackButton: {
    position: 'absolute',
    right: 20,
    bottom: 200,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  feedbackGradient: {
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
  },
  currentLocationButton: {
    position: 'absolute',
    right: 20,
    bottom: 260,
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
    elevation: 5,
  },
  myLocationMarker: {
    width: 22,
    height: 22,
    borderRadius: 11,
    backgroundColor: 'rgba(37, 116, 255, 0.2)',
    borderWidth: 1,
    borderColor: '#2574FF',
    justifyContent: 'center',
    alignItems: 'center',
  },
  myLocationDot: {
    width: 10,
    height: 10,
    borderRadius: 5,
    backgroundColor: '#2574FF',
  },
  vehicleMarker: {
    width: 35,
    height: 35,
    borderRadius: 17.5,
    backgroundColor: '#4B6BFE',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: 'white',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 5,
  },
  vehiclesList: {
    flex: 1,
  },
  // Subscription and vehicle type modal styles
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '90%',
    maxHeight: '80%',
    borderRadius: 15,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 5,
    elevation: 5,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 15,
  },
  modalTitle: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  closeButton: {
    padding: 5,
  },
  modalBody: {
    padding: 15,
  },
  vehicleTypeItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  vehicleTypeIcon: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#E8EDFF',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  vehicleTypeInfo: {
    flex: 1,
  },
  vehicleTypeName: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 5,
  },
  vehicleTypeDesc: {
    fontSize: 14,
  },
  // Add dark mode toggle button style
  darkModeToggle: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 10,
  },
  // No subscription overlay
  noSubscriptionContainer: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 5,
  },
  noSubscriptionContent: {
    backgroundColor: 'white',
    width: '85%',
    padding: 25,
    borderRadius: 15,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 3,
  },
  noSubscriptionTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#333',
    marginTop: 20,
    marginBottom: 10,
    textAlign: 'center',
  },
  noSubscriptionText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 24,
  },
  selectVehicleButton: {
    backgroundColor: '#4B6BFE',
    paddingVertical: 15,
    paddingHorizontal: 25,
    borderRadius: 10,
    width: '100%',
    alignItems: 'center',
  },
  selectVehicleButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  // Admin and driver specific styles
  adminButton: {
    position: 'absolute',
    right: 20,
    bottom: 320,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  adminGradient: {
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
  },
  driverButton: {
    position: 'absolute',
    right: 20,
    bottom: 320,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  driverGradient: {
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  // Admin price management styles
  adminPriceItem: {
    backgroundColor: '#fff',
    borderRadius: 10,
    marginBottom: 15,
    padding: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
    borderWidth: 1,
    borderColor: '#eee',
  },
  adminPriceHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  adminPriceName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  adminPriceDuration: {
    fontSize: 14,
    color: '#666',
  },
  adminPriceInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 5,
  },
  adminPriceLabel: {
    fontSize: 15,
    color: '#444',
    width: 50,
  },
  adminPriceInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    paddingHorizontal: 10,
    paddingVertical: 8,
    fontSize: 16,
  },
  adminSaveButton: {
    backgroundColor: '#4B6BFE',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 15,
    marginBottom: 20,
  },
  adminSaveButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  
  // Route management styles
  routeManagementItem: {
    backgroundColor: '#fff',
    borderRadius: 10,
    marginBottom: 15,
    padding: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
    borderWidth: 1,
    borderColor: '#eee',
  },
  routeManagementHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 15,
  },
  routeManagementInfo: {
    flex: 1,
  },
  routeManagementName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 3,
  },
  routeManagementDesc: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  routeManagementBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#E8EDFF',
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  routeManagementBadgeText: {
    color: '#4B6BFE',
    fontSize: 12,
    fontWeight: '500',
    marginLeft: 5,
  },
  routeManagementActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  routeManagementStatusButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 5,
    paddingHorizontal: 8,
    borderRadius: 15,
    marginRight: 8,
  },
  routeManagementStatusText: {
    fontSize: 12,
    fontWeight: '500',
    marginLeft: 5,
  },
  routeManagementEditButton: {
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 5,
  },
  routeManagementDeleteButton: {
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
  },
  stopsContainer: {
    marginTop: 5,
  },
  stopsTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: '#444',
    marginBottom: 8,
  },
  stopItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginLeft: 10,
    marginBottom: 8,
  },
  stopDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#4B6BFE',
    marginRight: 10,
  },
  stopName: {
    fontSize: 14,
    color: '#555',
  },
  addRouteButton: {
    backgroundColor: '#4B6BFE',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 5,
    marginBottom: 20,
  },
  addRouteButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
    marginLeft: 8,
  },
  stopMarker: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  // Passenger marker
  passengerMarker: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#FF3B30',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: 'white',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 5,
    position: 'relative', // Add position relative to properly position the destination indicator
  },
  passengerDestinationMarker: {
    position: 'absolute',
    top: -12,
    right: -10,
    backgroundColor: '#1E88E5',
    width: 24,
    height: 24,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: 'white',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 3,
  },
  // Request ride button for passengers
  requestRideFloatingButton: {
    position: 'absolute',
    right: 20,
    bottom: 200,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    zIndex: 10,
  },
  requestRideFloatingGradient: {
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
  },
  // Request ride modal styles
  rideLocationContainer: {
    marginBottom: 20,
  },
  rideLocationRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 10,
  },
  rideLocationDot: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#4B6BFE',
    marginRight: 15,
  },
  rideLocationDashedLine: {
    width: 2,
    height: 30,
    backgroundColor: '#ddd',
    marginLeft: 5,
    marginVertical: 5,
    borderStyle: 'dashed',
  },
  rideLocationTextContainer: {
    flex: 1,
  },
  rideLocationLabel: {
    fontSize: 12,
    color: '#666',
    marginBottom: 3,
  },
  rideLocationValue: {
    fontSize: 16,
    color: '#333',
    fontWeight: '500',
  },
  selectDestinationButton: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  selectDestinationText: {
    fontSize: 16,
    color: '#333',
  },
  rideOptionContainer: {
    marginBottom: 20,
  },
  rideOptionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  rideOptionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 15,
    borderWidth: 1,
    borderColor: '#eee',
    borderRadius: 10,
    marginBottom: 10,
  },
  rideOptionItemSelected: {
    borderColor: '#4B6BFE',
    backgroundColor: '#F5F8FF',
  },
  rideOptionIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#E8EDFF',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  rideOptionInfo: {
    flex: 1,
  },
  rideOptionName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  rideOptionETA: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  requestRideButton: {
    backgroundColor: '#4B6BFE',
    paddingVertical: 15,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  requestRideButtonDisabled: {
    backgroundColor: '#B3B3B3',
  },
  requestRideButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: 'white',
  },
  // My ride status styles
  myRideContainer: {
    position: 'absolute',
    left: 20,
    right: 20,
    bottom: 100,
    backgroundColor: 'white',
    borderRadius: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    overflow: 'hidden',
  },
  myRideHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 15,
  },
  myRideTitle: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  myRideCloseButton: {
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: 'rgba(255,255,255,0.2)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  myRideBody: {
    padding: 15,
  },
  myRideSearching: {
    alignItems: 'center',
    paddingVertical: 10,
  },
  myRideSearchingText: {
    marginTop: 10,
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
  myRideDriverInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
  },
  myRideDriverIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#4B6BFE',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  myRideDriverDetails: {
    flex: 1,
  },
  myRideDriverName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  myRideDriverETA: {
    fontSize: 14,
    color: '#666',
    marginTop: 3,
  },
  myRideTrackButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#E8EDFF',
    paddingVertical: 10,
    borderRadius: 8,
  },
  myRideTrackButtonText: {
    marginLeft: 8,
    fontSize: 14,
    fontWeight: '500',
    color: '#4B6BFE',
  },
  // Passenger item for driver view
  passengerItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  passengerIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FF3B30',
  },
  passengerInfo: {
    flex: 1,
    marginLeft: 15,
  },
  passengerName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 3,
  },
  passengerDetailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 3,
  },
  passengerDetailText: {
    fontSize: 12,
    color: '#666',
    marginLeft: 5,
  },
  acceptButton: {
    backgroundColor: '#4B6BFE',
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 20,
  },
  acceptButtonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 14,
  },
  pickupButton: {
    backgroundColor: '#E8EDFF',
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 20,
  },
  pickupButtonText: {
    color: '#4B6BFE',
    fontWeight: '600',
    fontSize: 14,
  },
  subscriptionItem: {
    backgroundColor: '#fff',
    borderRadius: 12,
    marginBottom: 15,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 2,
    borderWidth: 1,
    borderColor: '#eee',
    position: 'relative',
  },
  recommendedSubscription: {
    borderColor: '#4B6BFE',
    borderWidth: 2,
  },
  recommendedBadge: {
    position: 'absolute',
    top: -12,
    right: 20,
    backgroundColor: '#4B6BFE',
    paddingHorizontal: 12,
    paddingVertical: 5,
    borderRadius: 20,
  },
  recommendedText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 12,
  },
  subscriptionName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  subscriptionPrice: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4B6BFE',
    marginBottom: 5,
  },
  subscriptionDuration: {
    fontSize: 14,
    color: '#666',
    marginBottom: 15,
  },
  featuresContainer: {
    marginVertical: 10,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  featureText: {
    marginLeft: 10,
    fontSize: 14,
    color: '#444',
  },
  subscribeButton: {
    backgroundColor: '#4B6BFE',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 10,
  },
  subscribeButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  noSubscriptionOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0,0,0,0.7)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 10,
  },
  // Driver related styles
  driverBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 15,
    marginLeft: 10,
  },
  driverIcon: {
    marginRight: 5,
  },
  driverBadgeText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '500',
  },
  noPassengersContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 40,
  },
  noPassengersText: {
    marginTop: 10,
    fontSize: 16,
    textAlign: 'center',
  },
  requestRideButtonInBottomSheet: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginBottom: 15,
    alignItems: 'center',
  },
  requestRideGradient: {
    width: '100%',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  requestRideText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  noVehiclesContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 40,
  },
  noVehiclesText: {
    marginTop: 10,
    fontSize: 16,
    textAlign: 'center',
  },
  searchBarContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#eee',
    borderRadius: 8,
    paddingHorizontal: 12,
    marginBottom: 15,
    height: 50,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    marginLeft: 10,
    marginRight: 10,
    height: '100%',
  },
  destinationTabsContainer: {
    flexDirection: 'row',
    marginBottom: 15,
    borderRadius: 8,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#4B6BFE',
  },
  destinationTab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
  },
  destinationTabActive: {
    backgroundColor: '#4B6BFE',
  },
  destinationTabText: {
    color: '#4B6BFE',
    fontWeight: '600',
  },
  destinationList: {
    flex: 1,
    marginBottom: 15,
  },
  destinationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  destinationIconContainer: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#E8EDFF',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  destinationInfo: {
    flex: 1,
  },
  destinationName: {
    fontSize: 16,
    fontWeight: '500',
  },
  noResultsContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 30,
  },
  noResultsText: {
    marginTop: 10,
    fontSize: 16,
    textAlign: 'center',
  },
  useCurrentLocationButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#E8EDFF',
    paddingVertical: 15,
    borderRadius: 8,
  },
  useCurrentLocationText: {
    color: '#4B6BFE',
    fontSize: 16,
    fontWeight: '500',
  },
  adminBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 15,
    marginLeft: 10,
  },
  adminIcon: {
    marginRight: 5,
  },
  adminBadgeText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  featuresSection: {
    marginVertical: 10,
  },
  featuresTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  featureRow: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
  },
  featureInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    paddingHorizontal: 10,
    paddingVertical: 8,
    fontSize: 16,
  },
  removeFeatureButton: {
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 5,
  },
  addFeatureButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 10,
    marginTop: 5,
    borderWidth: 1,
    borderRadius: 6,
    borderStyle: 'dashed',
  },
  discountSection: {
    marginVertical: 10,
    padding: 10,
    borderWidth: 2,
    borderColor: '#ddd',
    borderRadius: 5,
  },
  discountTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  discountRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 5,
  },
  discountLabel: {
    fontSize: 14,
    color: '#666',
  },
  percentInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    paddingHorizontal: 10,
    paddingVertical: 8,
    fontSize: 16,
  },
  percentInput: {
    flex: 1,
    fontSize: 16,
    marginRight: 5,
  },
  percentSymbol: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  adminDashboardOverlay: {
    ...StyleSheet.absoluteFillObject,
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 5,
  },
  adminDashboardContent: {
    width: '85%',
    padding: 25,
    borderRadius: 15,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 3,
  },
  adminDashboardTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginTop: 20,
    marginBottom: 10,
    textAlign: 'center',
  },
  adminDashboardSubtitle: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 30,
    lineHeight: 24,
  },
  adminActionButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginBottom: 20,
  },
  adminActionButton: {
    width: '48%',
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  adminActionText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 14,
    textAlign: 'center',
  },
  toggleMapButton: {
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginTop: 15,
  },
  toggleMapButtonText: {
    color: '#4B6BFE',
    fontWeight: '600',
    fontSize: 14,
  },
  featureButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderWidth: 1,
    borderRadius: 5,
    marginBottom: 5,
  },
  featureButtonText: {
    fontSize: 16,
  },
  expandedFeatureContainer: {
    padding: 10,
    borderWidth: 1,
    borderRadius: 5,
    marginBottom: 10,
    marginTop: 5,
  },
  expandedFeatureInput: {
    minHeight: 80,
    padding: 8,
    borderWidth: 1,
    borderRadius: 4,
    marginBottom: 10,
    textAlignVertical: 'top',
  },
  expandedFeatureActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
  featureActionButton: {
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 5,
  },
  featureActionButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  fullScreenContainer: {
    flex: 1,
  },
  fullScreenHeader: {
    paddingTop: 50,
    paddingBottom: 20,
    paddingHorizontal: 20,
  },
  headerTitleContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  fullScreenTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
  },
  closeButtonContainer: {
    padding: 5,
  },
  closeButtonCircle: {
    width: 30,
    height: 30,
    borderRadius: 15,
    justifyContent: 'center',
    alignItems: 'center',
  },
  fullScreenBody: {
    padding: 20,
  },
  subscriptionCard: {
    borderRadius: 10,
    marginBottom: 20,
    padding: 20,
    borderWidth: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  featuresListContainer: {
    marginTop: 5,
    marginBottom: 15,
  },
  featuresListTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  featureListItem: {
    borderRadius: 5,
    marginBottom: 5,
    overflow: 'hidden',
  },
  featureListItemHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
  },
  featureIcon: {
    marginRight: 10,
  },
  featureListText: {
    fontSize: 16,
  },
  featureListDetail: {
    padding: 10,
    borderTopWidth: 1,
  },
  featureDetailText: {
    fontSize: 14,
    lineHeight: 20,
  },
  divider: {
    height: 1,
    marginVertical: 15,
  },
  destinationMarker: {
    width: 35,
    height: 35,
    borderRadius: 17.5,
    backgroundColor: 'rgba(255, 59, 48, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#FF3B30',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 5,
  },
  passengerDestinationMarker: {
    position: 'absolute',
    bottom: -5,
    right: -5,
    backgroundColor: '#FF3B30',
    width: 20,
    height: 20,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'white',
  },
  adminFeaturesTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  featureTextContainer: {
    flex: 1,
  },
  featureActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  editFeatureButton: {
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 5,
  },
  addFeatureText: {
    marginLeft: 8,
    fontSize: 14,
    fontWeight: '500',
  },
  passengerDestinationIcon: {
    position: 'absolute',
    bottom: -5,
    right: -5,
    backgroundColor: '#FF3B30',
    width: 20,
    height: 20,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'white',
  },
});
